{"version":3,"sources":["components/Matrix/row/node/Node.js","components/Matrix/row/Row.js","components/Matrix/Matrix.js","utilities/traverse-algorithms.js","components/MatrixBuilder/MatrixBuilder.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Node","currentRowRef","colPosition","currentNodeRef","useRef","useEffect","className","ref","Row","rowPosition","width","matrixRef","nodesRow","Array","push","Matrix","matrix","i","this","props","height","id","buildMatrix","Component","sleep","ms","Promise","resolve","setTimeout","writeMatrixCell","cellContainer","number","a","cell","current","cellSpan","querySelector","classList","add","textContent","String","then","remove","verticalTraverse","startRow","endRow","length","endCol","row","col","currentNum","isGoingDown","horizontalTraverse","startCol","isGoingRight","spiralTraverse","isNotOutOfRange","zigzagTraverse","traverseAlgorithm","traverseType","MatrixBuilder","onChangeHandler","event","setState","target","value","state","isMatrixReady","document","getBoundingClientRect","matrixHeight","Math","max","floor","matrixWidth","console","log","Fragment","htmlFor","name","onChange","map","style","textTransform","onClick","bind","React","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ySAeeA,MAbf,YAA+C,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,YACrBC,EAAiBC,iBAAO,MAK9B,OAJAC,qBAAU,WACNJ,EAAcC,GAAeC,IAE9B,IAEC,qBAAKG,UAAU,OAAOC,IAAKJ,EAA3B,SACI,4BCqBGK,MA5Bf,YAGI,IAH6C,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UACzBC,EAAW,GACXX,EAAgB,IAAIY,MAAMH,GAEpBR,EAAc,EAClBA,EAAcQ,EACdR,IAGJU,EAASE,KACL,cAAC,EAAD,CAEIb,cAAeA,EACfC,YAAaA,GAFR,CAACO,EAAaP,KAY/B,OALAG,qBAAU,WACNM,EAAUF,GAAeR,IAE1B,IAEI,qBAAKK,UAAU,MAAf,SAAsBM,KCDlBG,G,uKApBX,WAEI,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,EAAIC,KAAKC,MAAMC,OAAQH,IACnCD,EAAOF,KACH,cAAC,EAAD,CAEIL,YAAaQ,EACbP,MAAOQ,KAAKC,MAAMT,MAClBC,UAAWO,KAAKC,MAAMR,WAHjBM,IAOjB,OAAOD,I,oBAGX,WACI,OAAO,qBAAKK,GAAG,SAAR,SAAkBH,KAAKI,oB,GAjBjBC,c,uBCJrB,SAASC,IAAa,IAAPC,EAAM,uDAAH,EACd,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,SAGvCI,E,gFAAf,WAA+BC,EAAeC,GAA9C,iBAAAC,EAAA,6DACUC,EAAOH,EAAcI,QACrBC,EAAWF,EAAKG,cAAc,QACpCH,EAAKI,UAAUC,IAAI,UAHvB,SAIUd,EAAM,IAJhB,OAKIW,EAASI,YAAcC,OAAOT,GAC9BP,EAAM,KAAKiB,MAAK,kBAAMR,EAAKI,UAAUK,OAAO,aANhD,4C,+BASeC,E,8EAAf,WAAgC3B,GAAhC,2BAAAgB,EAAA,sDACUY,EAAW,EACXC,EAAS7B,EAAO8B,OAAS,EACzBC,EAAS/B,EAAO,GAAG8B,OAAS,EAC9BE,EAAM,EACNC,EAAM,EACNC,EAAa,EACbC,GAAc,EAPtB,YAQWF,GAAOF,GARlB,kCAUclB,EAAgBb,EAAOgC,GAAKC,GAAMC,KAVhD,QAWYC,EACIH,IAAQH,GACRI,IACAE,GAAc,GAEdH,IAGAA,IAAQJ,GACRK,IACAE,GAAc,GAEdH,IAvBhB,4D,+BA6BeI,E,8EAAf,WAAkCpC,GAAlC,2BAAAgB,EAAA,sDACUa,EAAS7B,EAAO8B,OAAS,EACzBO,EAAW,EACXN,EAAS/B,EAAO,GAAG8B,OAAS,EAC9BE,EAAM,EACNC,EAAM,EACNC,EAAa,EACbI,GAAe,EAPvB,YAQWN,GAAOH,GARlB,kCASchB,EAAgBb,EAAOgC,GAAKC,GAAMC,KAThD,QAUYI,EACIL,IAAQF,GACRC,IACAM,GAAe,GAEfL,IAGAA,IAAQI,GACRL,IACAM,GAAe,GAEfL,IAtBhB,4D,+BA4BeM,E,8EAAf,WAA8BvC,GAA9B,+BAAAgB,EAAA,sDACQY,EAAW,EACXC,EAAS7B,EAAO8B,OAAS,EACzBO,EAAW,EACXN,EAAS/B,EAAO,GAAG8B,OAAS,EAC5BI,EAAa,EALrB,YAMWN,GAAYC,GAAUQ,GAAYN,GAN7C,iBAOiBE,EAAMI,EAPvB,YAOiCJ,GAAOF,GAPxC,kCAQkBlB,EAAgBb,EAAO4B,GAAUK,GAAMC,KARzD,QAOgDD,IAPhD,uBAWiBD,EAAMJ,EAXvB,aAWiCI,GAAOH,GAXxC,kCAYkBhB,EAAgBb,EAAOgC,GAAKD,GAASG,KAZvD,QAWgDF,IAXhD,wBAeiBC,EAAMF,EAAS,EAfhC,aAemCE,GAAOI,GAf1C,oBAiBgBT,IAAaC,EAjB7B,sEAkBkBhB,EAAgBb,EAAO6B,GAAQI,GAAMC,KAlBvD,QAeoDD,IAfpD,wBAqBiBD,EAAMH,EAAS,EArBhC,aAqBmCG,EAAMJ,GArBzC,oBAuBgBS,IAAaN,EAvB7B,sEAwBkBlB,EAAgBb,EAAOgC,GAAKK,GAAWH,KAxBzD,QAqBmDF,IArBnD,wBA2BQJ,IACAC,IACAQ,IACAN,IA9BR,4D,sBAmCA,SAASS,EAAgBR,EAAKC,EAAKvC,EAAOU,GACzC,OAAO4B,GAAO5B,GAAU4B,GAAO,GAAKC,GAAOvC,GAASuC,GAAO,E,SAG7CQ,E,8EAAf,WAA8BzC,GAA9B,yBAAAgB,EAAA,sDACUtB,EAAQM,EAAO,GAAG8B,OAAS,EAC9B1B,EAASJ,EAAO8B,OAAS,EAC3BE,EAAM,EACNC,EAAM,EACHE,GAAc,EACdD,EAAa,EANrB,WAOQM,EAAgBR,EAAKC,EAAKvC,EAAOU,GAPzC,iCAQQS,EAAgBb,EAAOgC,GAAKC,GAAMC,KAR1C,OASMC,EACCH,IAAQ5B,GAAkB,IAAR6B,GACrBE,GAAc,EACVH,IAAQ5B,EAAS6B,IACJ,IAARA,GAAYD,MAErBA,IACAC,KAEWE,IACA,IAARH,GAAaC,IAAQvC,GACxByC,GAAc,EACVF,IAAQvC,EAASsC,IACJ,IAARA,GAAYC,MAErBD,IACAC,MAzBJ,4D,sBA+Be,SAAeS,EAA9B,oC,4CAAe,WAAiCC,EAAc3C,GAA/C,SAAAgB,EAAA,yDACU,aAAjB2B,EADO,gCAEDhB,EAAiB3B,GAFhB,iCAGiB,eAAjB2C,EAHA,iCAIDP,EAAmBpC,GAJlB,kCAKiB,WAAjB2C,EALA,kCAMDJ,EAAevC,GANd,iDAQDyC,EAAezC,GARd,6C,gCCxDA4C,E,kDA9EX,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IAqBV0C,gBAAkB,SAACC,GACf,EAAKC,SAAS,CAACJ,aAAcG,EAAME,OAAOC,SArB1C,EAAKC,MAAQ,CACTP,aAAc,WACdQ,eAAe,GAJJ,E,qDAQnB,WAAoB,MAEUC,SAAShC,cAAc,QAAQiC,wBAAjD3D,EAFQ,EAERA,MAAOU,EAFC,EAEDA,OACfF,KAAKoD,aAAeC,KAAKC,IAAID,KAAKE,MAAMrD,EAAS,GAAK,GAAI,GAC1DF,KAAKwD,YAAcH,KAAKC,IAAID,KAAKE,MAAM/D,EAAQ,GAAK,GAAI,GACxDQ,KAAKP,UAAY,IAAIE,MAAMK,KAAKE,QAChCF,KAAK6C,SAAS,CAACI,eAAe,M,gCAGlC,WACIQ,QAAQC,IAAI1D,KAAKgD,MAAMP,cACvBgB,QAAQC,IAAI1D,KAAKP,a,oBAOrB,WAgDI,OA9CIO,KAAKgD,MAAMC,cAEP,eAAC,IAAMU,SAAP,WACI,cAAC,EAAD,CACIzD,OAAQF,KAAKoD,aACb5D,MAAOQ,KAAKwD,YACZ/D,UAAWO,KAAKP,YAEpB,sBAAKU,GAAG,iBAAR,UACI,uBAAOyD,QAAQ,uBAAf,4BACA,wBACIC,KAAK,uBACL1D,GAAG,uBACH4C,MAAO/C,KAAKgD,MAAMP,aAClBqB,SAAU9D,KAAK2C,gBAJnB,SAOQ,CAAC,WAAY,aAAc,SAAU,UACpCoB,KAAI,SAAAtB,GACD,OACI,wBAEIM,MAAON,EACPuB,MAAO,CAACC,cAAe,cAH3B,SAKKxB,GAJIA,QAUzB,wBACItC,GAAG,cACH+D,QACI1B,EAAkB2B,KAAKnE,KACvBA,KAAKgD,MAAMP,aAAczC,KAAKP,WAJtC,wBAaM,8BAAK,kD,GAzEP2E,IAAM/D,WCMnBgE,MARf,WACE,OACE,qBAAKjF,UAAU,MAAf,SACE,cAAC,EAAD,OCMSkF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BX,M","file":"static/js/main.a71ef4d1.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nfunction Node({ currentRowRef, colPosition }) {\r\n    const currentNodeRef = useRef(null);\r\n    useEffect(() => {\r\n        currentRowRef[colPosition] = currentNodeRef;\r\n        // currentRowRef.push(currentNodeRef);\r\n    }, []);\r\n    return (\r\n        <div className=\"node\" ref={currentNodeRef}>\r\n            <span></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Node;","import { useEffect } from 'react';\r\nimport Node from './node/Node';\r\n\r\nfunction Row({ rowPosition, width, matrixRef }) {\r\n    const nodesRow = [];\r\n    const currentRowRef = new Array(width);\r\n    for (\r\n            let colPosition = 0; \r\n            colPosition < width;\r\n            colPosition++\r\n        ) \r\n    {\r\n        nodesRow.push(\r\n            <Node \r\n                key={[rowPosition, colPosition]}\r\n                currentRowRef={currentRowRef}\r\n                colPosition={colPosition}\r\n            />\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        matrixRef[rowPosition] = currentRowRef;\r\n        // matrixRef.push(currentRowRef);\r\n    }, []);\r\n\r\n    return <div className=\"row\">{nodesRow}</div>;\r\n}\r\n\r\n\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport Row from './row/Row';\r\nimport './Matrix.css';\r\n\r\nclass Matrix extends Component {\r\n    buildMatrix() {\r\n        const matrix = [];\r\n        for (let i = 0; i < this.props.height; i++) {\r\n            matrix.push(\r\n                <Row \r\n                    key={i}\r\n                    rowPosition={i}\r\n                    width={this.props.width}\r\n                    matrixRef={this.props.matrixRef} \r\n                />\r\n            );\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    render() {\r\n        return <div id=\"matrix\">{this.buildMatrix()}</div>;\r\n    }\r\n}\r\n\r\nexport default Matrix;","function sleep(ms=0) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function writeMatrixCell(cellContainer, number) {\r\n    const cell = cellContainer.current;\r\n    const cellSpan = cell.querySelector(\"span\");\r\n    cell.classList.add(\"marked\");\r\n    await sleep(20);\r\n    cellSpan.textContent = String(number);\r\n    sleep(500).then(() => cell.classList.remove(\"marked\"));\r\n}\r\n\r\nasync function verticalTraverse(matrix) {\r\n    const startRow = 0;\r\n    const endRow = matrix.length - 1;\r\n    const endCol = matrix[0].length - 1;\r\n    let row = 0;\r\n    let col = 0;\r\n    let currentNum = 0;\r\n    let isGoingDown = true;\r\n    while (col <= endCol) {\r\n        // console.log([row, col]);\r\n        await writeMatrixCell(matrix[row][col], currentNum++);\r\n        if (isGoingDown) {\r\n            if (row === endRow) {\r\n                col++;\r\n                isGoingDown = false;\r\n            } else {\r\n                row++;\r\n            }\r\n        } else {\r\n            if (row === startRow) {\r\n                col++;\r\n                isGoingDown = true;\r\n            } else {\r\n                row--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function horizontalTraverse(matrix) {\r\n    const endRow = matrix.length - 1;\r\n    const startCol = 0;\r\n    const endCol = matrix[0].length - 1;\r\n    let row = 0;\r\n    let col = 0;\r\n    let currentNum = 0;\r\n    let isGoingRight = true;\r\n    while (row <= endRow) {\r\n        await writeMatrixCell(matrix[row][col], currentNum++);\r\n        if (isGoingRight) {\r\n            if (col === endCol) {\r\n                row++;\r\n                isGoingRight = false;\r\n            } else {\r\n                col++;\r\n            }\r\n        } else {\r\n            if (col === startCol) {\r\n                row++;\r\n                isGoingRight = true;\r\n            } else {\r\n                col--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function spiralTraverse(matrix) {\r\n    let startRow = 0;\r\n    let endRow = matrix.length - 1;\r\n    let startCol = 0;\r\n    let endCol = matrix[0].length - 1;\r\n    let currentNum = 0;\r\n    while (startRow <= endRow && startCol <= endCol) {\r\n        for (let col = startCol; col <= endCol; col++) {\r\n            await writeMatrixCell(matrix[startRow][col], currentNum++);\r\n        }\r\n\r\n        for (let row = startRow; row <= endRow; row++) {\r\n            await writeMatrixCell(matrix[row][endCol], currentNum++);\r\n        }\r\n\r\n        for (let col = endCol - 1; col >= startCol; col--) {\r\n            // Single Row in the midle of the matrix.\r\n            if (startRow === endRow) break;\r\n            await writeMatrixCell(matrix[endRow][col], currentNum++);\r\n        }\r\n\r\n        for (let row = endRow - 1; row > startRow; row--) {\r\n            // Single Column in the middle of the matrix\r\n            if (startCol === endCol) break;\r\n            await writeMatrixCell(matrix[row][startCol], currentNum++);\r\n        }\r\n\r\n        startRow++;\r\n        endRow--;\r\n        startCol++;\r\n        endCol--;\r\n    }\r\n}\r\n\r\n// zigzagTraverse helper\r\nfunction isNotOutOfRange(row, col, width, height) {\r\n\treturn row <= height && row >= 0 && col <= width && col >= 0;\r\n}\r\n\r\nasync function zigzagTraverse(matrix) {\r\n    const width = matrix[0].length - 1;\r\n\tconst height = matrix.length - 1;\r\n\tlet row = 0;\r\n\tlet col = 0;\r\n    let isGoingDown = true;\r\n    let currentNum = 0;\r\n\twhile (isNotOutOfRange(row, col, width, height)) {\r\n\t\tawait writeMatrixCell(matrix[row][col], currentNum++);\r\n\t\tif (isGoingDown) {\r\n\t\t\tif (row === height || col === 0) {\r\n\t\t\t\tisGoingDown = false;\r\n\t\t\t\tif (row === height) {col++;}\r\n\t\t\t\telse if (col === 0) {row++;} \r\n\t\t\t} else {\r\n\t\t\t\trow++;\r\n\t\t\t\tcol--;\r\n\t\t\t}\r\n\t\t} else if (!(isGoingDown)) {\r\n\t\t\tif (row === 0 || col === width) {\r\n\t\t\t\tisGoingDown = true;\r\n\t\t\t\tif (col === width ) {row++;}\r\n\t\t\t\telse if (row === 0) {col++;}\r\n\t\t\t} else {\r\n\t\t\t\trow--;\r\n\t\t\t\tcol++;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\nexport default async function traverseAlgorithm(traverseType, matrix) {\r\n    if (traverseType === \"vertical\") {\r\n        await verticalTraverse(matrix);\r\n    } else if (traverseType === \"horizontal\") {\r\n        await horizontalTraverse(matrix);\r\n    } else if (traverseType === \"spiral\") {\r\n        await spiralTraverse(matrix);\r\n    } else {\r\n        await zigzagTraverse(matrix);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Matrix from '../Matrix/Matrix';\r\nimport traverseAlgorithm from '../../utilities/traverse-algorithms';\r\nimport './MatrixBuilder.css';\r\n\r\nclass MatrixBuilder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traverseType: \"vertical\",\r\n            isMatrixReady: false\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // const {top, left, width, height} = element.getBoundingClientRect();\r\n        const { width, height } = document.querySelector(\"body\").getBoundingClientRect();\r\n        this.matrixHeight = Math.max(Math.floor(height / 40 - 5), 4);\r\n        this.matrixWidth = Math.max(Math.floor(width / 40 - 5), 4);\r\n        this.matrixRef = new Array(this.height);\r\n        this.setState({isMatrixReady: true});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state.traverseType);\r\n        console.log(this.matrixRef);\r\n    }\r\n\r\n    onChangeHandler = (event) => {\r\n        this.setState({traverseType: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        let elementToRender;\r\n        if (this.state.isMatrixReady) {\r\n            elementToRender = (\r\n                <React.Fragment>\r\n                    <Matrix \r\n                        height={this.matrixHeight} \r\n                        width={this.matrixWidth}\r\n                        matrixRef={this.matrixRef} \r\n                    />\r\n                    <div id=\"matrix-control\">\r\n                        <label htmlFor=\"traverse-type-select\">traverse-type:</label>\r\n                        <select \r\n                            name=\"traverse-type-select\" \r\n                            id=\"traverse-type-select\" \r\n                            value={this.state.traverseType}\r\n                            onChange={this.onChangeHandler}\r\n                        >\r\n                            {\r\n                                [\"vertical\", \"horizontal\", \"zigzag\", \"spiral\"]\r\n                                .map(traverseType => {\r\n                                    return (\r\n                                        <option\r\n                                            key={traverseType} \r\n                                            value={traverseType}\r\n                                            style={{textTransform: 'capitalize'}}\r\n                                        >\r\n                                            {traverseType}\r\n                                        </option>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </select>\r\n                        <button \r\n                            id=\"play-button\" \r\n                            onClick={\r\n                                traverseAlgorithm.bind(this, \r\n                                this.state.traverseType, this.matrixRef)\r\n                            }\r\n                        >\r\n                            Play\r\n                        </button>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            elementToRender = <div><h1>Loading...</h1></div>;\r\n        }\r\n        return elementToRender;\r\n    }\r\n}\r\n\r\nexport default MatrixBuilder;","import './App.css';\nimport MatrixBuilder from '../components/MatrixBuilder/MatrixBuilder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MatrixBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}